diff --git dedupe.module dedupe.module
index 388d15b..3167b28 100644
--- dedupe.module
+++ dedupe.module
@@ -60,6 +60,12 @@ function dedupe_content_command($form, &$form_state) {
     '#default_value' => variable_get('dedupe_limit', 1),
     '#description' => t('Only do this many unique titles at a time. Use this (repeatedly) if you have problems with thousands of results. This limits the "titles", and each title may have a number of clones that needs deleting, so the actual process will run over (this limit)x(number of duplicates). 0 means no limit. Limiting the number of titles processed can also be handy for testing.'),
   );
+  $form['dedupe_taxonomy'] = array(
+    '#type' =>
+    'checkbox', 
+    '#default_value' => variable_get('dedupe_taxonomy', TRUE),
+    '#title' => t('Collate taxonomy terms'),
+  );
   $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Dedupe'),
@@ -71,14 +77,13 @@ function dedupe_content_command($form, &$form_state) {
  * Handle form submission, start the process.
  */
 function dedupe_content_command_submit($form, $form_state) {
-  foreach (array('dedupe_node_types', 'dedupe_dry_run', 'dedupe_limit') as $var) {
+  foreach (array('dedupe_node_types', 'dedupe_dry_run', 'dedupe_limit', 'dedupe_taxonomy') as $var) {
     if (isset($form_state['values'][$var])) {
       variable_set($var, $form_state['values'][$var]);
     }
   }
   $type = $form_state['values']['dedupe_node_types'];
-
-  $count = dedupe_delete($type, $form_state['values']['dedupe_dry_run'], $form_state['values']['dedupe_limit']);
+  $count = dedupe_delete($type, $form_state['values']['dedupe_dry_run'], $form_state['values']['dedupe_limit'], $form_state['values']['dedupe_taxonomy']);
 
   $message = t('Queued %count titles that need duplicates removed from content type %type', array('%count' => $count, '%type' => $type));
   drupal_set_message($message);
@@ -95,7 +100,7 @@ function dedupe_content_command_submit($form, $form_state) {
  * Even that needed help to scale safely, so the process that finds clones
  * is a batch job too.
  */
-function dedupe_delete($type, $dry_run = TRUE, $limit = 0) {
+function dedupe_delete($type, $dry_run = TRUE, $limit = 0, $tax_collate = TRUE) {
   $count = 0;
   $previous = array();
 
@@ -126,7 +131,7 @@ function dedupe_delete($type, $dry_run = TRUE, $limit = 0) {
   $result = $query->execute();
   foreach ($result as $dupe) {
     $title = $dupe->title;
-    $operations[] = array('dedupe_queue_deletions', array($title, $dry_run));
+    $operations[] = array('dedupe_queue_deletions', array($title, $dry_run, $tax_collate));
     $count++;
   }
   
@@ -154,7 +159,7 @@ function dedupe_delete($type, $dry_run = TRUE, $limit = 0) {
  * @param array $context
  *   Batch context.
  */
-function dedupe_queue_deletions($title, $dry_run = TRUE, &$context = array()) {
+function dedupe_queue_deletions($title, $dry_run = TRUE, $tax_collate = TRUE, &$context = array()) {
 
   // Gotcha. MySQL '=' operator is case-insentive and trims whitespace
   // Which in our case is different enough to worry about.
@@ -171,6 +176,7 @@ function dedupe_queue_deletions($title, $dry_run = TRUE, &$context = array()) {
   
   $query = db_select('node', 'n')
   ->fields('n', array('nid', 'title'))
+  //->join('taxonomy_index', 'ti', 'n.nid = ti.nid')
   ->condition('title', $title, "=")
   ->orderBy('nid', 'ASC')
   ;
@@ -197,6 +203,9 @@ function dedupe_queue_deletions($title, $dry_run = TRUE, &$context = array()) {
 
     // This double-check should be pointless, but it was a gotcha.
     if ($row->title == $title) {
+      if ($tax_collate) {
+        $operations[] = array('dedupe_collate_terms', array($row->nid, $original->nid));
+      }
       if (! $dry_run) {
         $operations[] = array('dedupe_node_delete_callback', array($row->nid, $row->title));
       }
@@ -246,3 +255,14 @@ function dedupe_node_delete_callback($nid, $title, &$context) {
   node_delete($nid);
   return TRUE;
 }
+
+function dedupe_collate_terms($nid, $original_nid) {
+  // assign terms from duplicates to 'original' node
+  db_update('taxonomy_index')
+    ->fields(array(
+      'nid' => $original_nid,
+    ))
+    ->condition('nid', $nid, '=')
+    ->execute();
+  return TRUE;
+}
